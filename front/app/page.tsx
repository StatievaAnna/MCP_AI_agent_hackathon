'use client'

import { useState, useEffect } from 'react'
import axios from 'axios'
import { motion, AnimatePresence } from 'framer-motion'

const questions = [
  "–í –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤–∞–º —Å–ª–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–¥–æ—Å—Ç—å –æ—Ç —Ö–æ–±–±–∏, —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –æ–±—â–µ–Ω–∏—è?",
  "–í–∞–º –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –±—É–¥—É—â–µ–µ –º—Ä–∞—á–Ω–æ–µ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∫ –ª—É—á—à–µ–º—É?",
  "–ü—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –ª–∏ –≤—ã —Å—Ä–µ–¥–∏ –Ω–æ—á–∏ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ —É—Ç—Ä–æ–º –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã?",
  "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –¥–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–∏—Ö —É—Å–∏–ª–∏–π?",
  "–í—ã —Å—Ç–∞–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ, —á–µ–º —Ä–∞–Ω—å—à–µ, –∏–ª–∏ –≤–æ–≤—Å–µ –∑–∞–±—ã–≤–∞–µ—Ç–µ –æ –µ–¥–µ?",
  "–í–∞–º –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤—ã –æ–±—É–∑–∞ –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –∏–ª–∏ –Ω–µ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?",
  "–í–∞–º —Å–ª–æ–∂–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ, —É—á—ë–±–µ –∏–ª–∏ –¥–∞–∂–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ?",
  "–û–∫—Ä—É–∂–∞—é—â–∏–µ –≥–æ–≤–æ—Ä–∏–ª–∏, —á—Ç–æ –≤—ã —Å—Ç–∞–ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±—ã—á–Ω–æ–≥–æ?",
  "–ë—ã–≤–∞–ª–æ –ª–∏, —á—Ç–æ –≤—ã –¥—É–º–∞–ª–∏ –æ —Å–º–µ—Ä—Ç–∏ –∏–ª–∏ –æ —Ç–æ–º, —á—Ç–æ ¬´–≤—Å–µ–º –±—ã–ª–æ –±—ã –ª—É—á—à–µ –±–µ–∑ –º–µ–Ω—è¬ª?",
  "–ö–∞–∫ –≤—ã –æ—â—É—â–∞–µ—Ç–µ —Å–≤–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏–ª–∏ —Å–æ–∫—É—Ä—Å–Ω–∏–∫–∞–º–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?",
  "–ò—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –ª–∏ –≤—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å –≤ —Ä–∞–±–æ—á–µ–π/—É—á–µ–±–Ω–æ–π —Å—Ä–µ–¥–µ –∏–∑-–∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–≥–∏–º–∏?"
]

const quotes = [
  "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –æ–¥–∏–Ω–æ—á–∫—É üíô",
  "–ü—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏ ‚Äî —ç—Ç–æ –∑–Ω–∞–∫ —Å–∏–ª—ã, –∞ –Ω–µ —Å–ª–∞–±–æ—Å—Ç–∏ üå±",
  "–¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ üåà",
  "–ö–∞–∂–¥—ã–π —à–∞–≥ –≤–ø–µ—Ä—ë–¥ ‚Äî —ç—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å üêæ",
  "–¢—ã –≤–∞–∂–µ–Ω –∏ –¥–æ—Å—Ç–æ–∏–Ω –∑–∞–±–æ—Ç—ã üß°",
  "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —à–∞–≥–æ–º –∫ –∑–∞–±–æ—Ç–µ –æ —Å–µ–±–µ ‚òÄÔ∏è",
  "–ò–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –±—ã—Ç—å ‚Äî —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üåº",
  "–î—ã—à–∏. –¢—ã —É–∂–µ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è, –∏ —ç—Ç–æ –≤–∞–∂–Ω–æ üí´",
  "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è üíñ",
  "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º –ø–µ—Ä–µ–º–µ–Ω–∞–º üåø"
]

function generateSessionId() {
  return Math.floor(100000000 + Math.random() * 900000000)
}

export default function PHQ9Form() {
  const [answers, setAnswers] = useState<string[]>(Array(questions.length).fill(''))
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [submitted, setSubmitted] = useState(false)
  const [direction, setDirection] = useState(0)
  const [quoteMap, setQuoteMap] = useState<{ [key: number]: string }>({})
  const [sessionId, setSessionId] = useState<number>(0)

  useEffect(() => {
    setSessionId(generateSessionId())
  }, [])

  const getQuoteForQuestion = (index: number) => {
    if (quoteMap[index]) return quoteMap[index]
    const randomIndex = Math.floor(Math.random() * quotes.length)
    const newQuote = quotes[randomIndex]
    setQuoteMap(prev => ({ ...prev, [index]: newQuote }))
    return newQuote
  }

  const handleChange = (value: string) => {
    const updated = [...answers]
    updated[currentQuestion - 1] = value
    setAnswers(updated)
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    const data: Record<string, string> = {}
    questions.forEach((q, i) => {
      data[q] = answers[i]
    })

    try {
      await axios.post('http://localhost:8000/survay', {
        session_id: sessionId,
        answers: data
      })
      setSubmitted(true)
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö')
      console.error(err)
    }
  }

  if (submitted) return (
    <div className="flex justify-center items-center h-screen bg-gradient-to-b from-purple-100 to-white">
      <p className="text-xl font-semibold text-purple-800">–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞!</p>
    </div>
  )

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-purple-100 to-white p-6">
      <form onSubmit={handleSubmit} className="w-full max-w-3xl p-8 bg-white shadow-2xl rounded-3xl space-y-8 text-center">
        {currentQuestion > 0 && (
          <div className="w-full bg-gray-200 h-2 rounded-full overflow-hidden">
            <div
              className="bg-blue-600 h-full transition-all duration-300"
              style={{ width: `${(currentQuestion / questions.length) * 100}%` }}
            />
          </div>
        )}

        {currentQuestion === 0 ? (
          <div className="space-y-6">
            <p className="text-gray-800 text-lg text-left max-w-2xl mx-auto">
              <strong>PHQ-9</strong> ‚Äî —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –¥–µ–ø—Ä–µ—Å—Å–∏–∏. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏.
              <br /><br />
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π.
            </p>
            <button
              type="button"
              onClick={() => setCurrentQuestion(1)}
              className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              –ù–∞—á–∞—Ç—å ‚Üí
            </button>
          </div>
        ) : (
          <>
            <div className="text-center text-purple-700 italic text-lg">
              {getQuoteForQuestion(currentQuestion)}
            </div>

            <div className="min-h-[180px] relative">
              <AnimatePresence mode="wait">
                <motion.div
                  key={currentQuestion}
                  initial={{ opacity: 0, x: direction > 0 ? 100 : -100 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: direction > 0 ? -100 : 100 }}
                  transition={{ duration: 0.4 }}
                  className="absolute w-full"
                >
                  <p className="text-xl font-semibold text-purple-700 mb-4">
                    {questions[currentQuestion - 1]}
                  </p>

                  <textarea
                  className="w-full max-w-2xl mx-auto border border-gray-300 rounded-xl p-4 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 text-black text-base bg-white min-h-[140px] shadow-sm"
                  rows={4}
                  value={answers[currentQuestion - 1]}
                  onChange={(e) => handleChange(e.target.value)}
                  required
                  />
                </motion.div>
              </AnimatePresence>
            </div>

            <div className="flex justify-between items-center pt-4">
              {currentQuestion > 1 ? (
                <button
                  type="button"
                  onClick={() => {
                    setDirection(-1)
                    setCurrentQuestion((prev) => Math.max(1, prev - 1))
                  }}
                  className="px-4 py-2 rounded text-white bg-blue-500 hover:bg-blue-600"
                >
                  ‚Üê –ù–∞–∑–∞–¥
                </button>
              ) : <div></div>}

              {currentQuestion === questions.length ? (
                <button
                  type="submit"
                  className="px-6 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              ) : (
                <button
                  type="button"
                  onClick={() => {
                    setDirection(1)
                    setCurrentQuestion((prev) => Math.min(questions.length, prev + 1))
                  }}
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                >
                  –í–ø–µ—Ä—ë–¥ ‚Üí
                </button>
              )}
            </div>
          </>
        )}
      </form>
    </div>
  )
}
