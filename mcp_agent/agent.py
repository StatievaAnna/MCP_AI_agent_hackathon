import os

import openai
import json
import requests
from dotenv import load_dotenv

load_dotenv()

from openai import OpenAI
from config import MODEL_API_KEY

import requests

histori = {} 

def load_tools_from_openapi(openapi_url: str):
    response = requests.get(openapi_url)
    openapi = response.json()

    tools = []
    name_to_path_map = {}
    paths = openapi.get("paths", {})

    for path, methods in paths.items():
        for method, operation in methods.items():
            if method.lower() != "get":
                continue  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ GET-–∑–∞–ø—Ä–æ—Å—ã

            parameters = operation.get("parameters", [])
            properties = {}
            required = []

            for param in parameters:
                if param.get("in") != "query":
                    continue

                name = param["name"]
                schema = param.get("schema", {})
                param_type = schema.get("type", "string")

                json_type = (
                    "string" if param_type not in {"integer", "number", "boolean"} else param_type
                )

                properties[name] = {
                    "type": json_type,
                    "description": param.get("description", "")
                }

                if param.get("required"):
                    required.append(name)

            operation_id = operation.get("operationId")
            if not operation_id:
                # –µ—Å–ª–∏ –Ω–µ—Ç operationId, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏
                operation_id = path.strip("/").replace("/", "_")

            description = operation.get("description", "")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
            name_to_path_map[operation_id] = path

            # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI function
            tool = {
                "type": "function",
                "function": {
                    "name": operation_id,
                    "description": description,
                    "parameters": {
                        "type": "object",
                        "properties": properties,
                        "required": required
                    }
                }
            }

            tools.append(tool)

    return tools, name_to_path_map

openapi_url = "http://localhost:8000/openapi.json"
tools, name_to_path_map = load_tools_from_openapi(openapi_url)

# def call_mcp_function(name, args):
#     base_url = "http://localhost:8000/api"
#     if name == "fda_drug_info":
#         print("–í—ã–∑–æ–≤ fda_drug_info")
#         return requests.get(f"{base_url}/fda", params=args).json()
#     elif name == "pubmed_search":
#         print("–í—ã–∑–æ–≤ pubmed_search")
#         return requests.get(f"{base_url}/pubmed", params=args).json()
#     elif name == "clinical_trials_search":
#         print("–í—ã–∑–æ–≤ clinical_trials_search")
#         print(args)
#         return requests.get(f"{base_url}/clinical_trials", params=args).json()
#     return {"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"}

def call_mcp_function(name, args, name_to_path_map):
    base_url = "http://localhost:8000"

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∏–∑ –∫–∞—Ä—Ç—ã
    path = name_to_path_map.get(name)
    if not path:
        return {"error": f"Unknown function name: {name}"}

    url = f"{base_url}{path}"

    print(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ '{name}' –ø–æ –∞–¥—Ä–µ—Å—É: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {args}")

    try:
        response = requests.get(url, params=args)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        return {"error": str(e)}


def ask_mcp_assisted_model(messages):
    for i in range(10):
        response = client.chat.completions.create(
            model="gpt-4",
            messages=messages,
            tools=tools,
            tool_choice="auto"
        )

        msg = response.choices[0].message

        if not msg.tool_calls:
            break

        tool_call = msg.tool_calls[0]
        args = json.loads(tool_call.function.arguments)
        func_name = tool_call.function.name

        # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        mcp_result = call_mcp_function(func_name, args, name_to_path_map)
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", mcp_result)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç assistant (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –≤—ã–∑–æ–≤—É) –∏ –æ—Ç tool (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        messages.append(msg)
        messages.append({
            "role": "tool",
            "tool_call_id": tool_call.id,
            "name": func_name,
            "content": json.dumps(mcp_result)
        })
    
    messages.append(msg)
    return msg.content

def chat_loop():
    print("üí¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.")
    history = [system_message]

    # all_history = {
    #     "id1": history1,
    #     "id2": history2,  
    # }

    while True:
        user_input = input("\nüë§ –í—ã: ")
        if user_input.lower() in {"–≤—ã—Ö–æ–¥", "exit", "quit"}:
            print("üîö –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            break

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append({"role": "user", "content": user_input})

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ —Å —É—á—ë—Ç–æ–º –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        reply = ask_mcp_assisted_model(history)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append({"role": "assistant", "content": reply})

        print("\nü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:", reply)

histori = {}          

def start_chat(id):
    histori[id] = []
    histori[id].append(system_message)
    # –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞...
    reply = '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è?' # —Ç—É—Ç –±—É–¥–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑–æ–≤ —Ç–µ—Å—Ç–∞
    assistant_message = {"role": "assistant", "content": reply}
    histori[id].append(assistant_message)
    return reply
      
def get_answer(id, user_input):

    if user_input.lower() in {"–≤—ã—Ö–æ–¥", "exit", "quit"}:
        return("üîö –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–æ –º–Ω–æ–π —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ —á—É–≤—Å—Ç–≤–∞–º–∏! –ù–∞–¥–µ—é—Å—å, —è —Å–º–æ–≥ —Ç–µ–±–µ –ø–æ–º–æ—á—å.")   

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    histori[id].append({"role": "user", "content": user_input})

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ —Å —É—á—ë—Ç–æ–º –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    reply = ask_mcp_assisted_model(histori[id])

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    histori[id].append({"role": "assistant", "content": reply})

    return reply


# üîÅ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":

    client = OpenAI(api_key=MODEL_API_KEY)  # üîí –í—Å—Ç–∞–≤—å —Å–≤–æ–π API –∫–ª—é—á

    system_message = {
        "role": "system",
        "content": (
            "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥. "
            "–¢—ã –¥–æ–ª–∂–µ–Ω —Å–∞–º –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–≤–æ–¥—É —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–∞"
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –º—è–≥–∫–æ —Ä–∞—Å—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Å–∏–º–ø—Ç–æ–º–∞—Ö, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö. "
            "–ù–µ –¥–µ–ª–∞–π –ø–æ—Å–ø–µ—à–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ —É–∑–Ω–∞–π –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏.\n\n"
            "–ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ –¥–∏–∞–≥–Ω–æ–∑–µ "
            "–ü—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ–∑–∞ –∏ –º–µ—Ç–æ–¥–æ–≤ –ª–µ—á–µ–Ω–∏—è, –∏–∑–≤—É—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–±–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—ã –º–æ–∂–µ—à—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ–º–µ –∑–¥–æ—Ä–æ–≤—å—è, –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤–∞–∂–Ω–æ –≤–±–∏–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ"
            "–¢—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
            "–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É —Å–µ—Ä–≤–∏—Å—É MCP (—á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã), —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑ "
            "–∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–µ—á–µ–Ω–∏—é. "
            "–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ –∏–ª–∏ –Ω–µ—è—Å–Ω–æ ‚Äî —É—Ç–æ—á–Ω—è–π, –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π, –ø—Ä–æ—è–≤–ª—è–π —Å–æ—á—É–≤—Å—Ç–≤–∏–µ."
        )
    }
    
    start_message = start_chat("123")
    print(start_message)
    user_input = "–£ –º–µ–Ω—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ –±–µ—Å—Å–æ–Ω–∏—Ü–∞ 2 –Ω–µ–¥–µ–ª–∏"
    print(user_input)
    print(get_answer("123", user_input))
    start_message = start_chat("124")
    print(start_message)
    user_input = "–£ –º–µ–Ω—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ –±–µ—Å—Å–æ–Ω–∏—Ü–∞ 3 –º–µ—Å—è—Ü–∞. –ê –µ—â–µ –º–µ–Ω—è –º—É—á–∞–µ—Ç –∂–µ–Ω–∞"
    print(user_input)
    print(get_answer("124", user_input))
    
    # question = "–†–∞—Å—Å–∫–∞–∂–∏ –æ–± –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –Ω–∞ —Ç–µ–º—É diabetes"
    # answer = ask_mcp_assisted_model(question)
    # print("\n–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n", answer)
    # chat_loop()
